# visualize on 2D map
st.header("How many collisons occur during a given time of day?")
# hour = st.selectbox("Hour to look at",range(0,24),1)
hour = st.slider("Hour to look at", 0, 23)
# hour = st.sidebar.slider("Hour to look at",0,23)
data = data[data['date/time'].dt.hour == hour]

# visualize 3D map
st.markdown("Vehicle collision between %i:00 and %i:00" % (hour, (hour + 1) % 24))
midpoint = (np.average(data['latitude']), np.average(data['longitude']))

st.write(pdk.Deck(
    map_style="mapbox://styles/mapbox/light-v9",
    initial_view_state={
        "latitude": midpoint[0],
        "longitude": midpoint[1],
        "zoom": 11,
        "pitch": 50,
    },
    # add a layer to visualize on 3d map
    layers=[
        pdk.Layer(
            "HexagonLayer",
            data=data[['date/time', 'latitude', 'longitude']],
            get_position=['longitude', 'latitude'],
            radius=100,
            extruded=True,
            pickable=True,
            elevation_scale=4,
            elevation_range=[0, 1000],
        ),
    ],
))

# chart and histogram
st.subheader("Breakdown of collision by %i:00 and %i:00" % (hour, (hour + 1) % 24))
filtered = data[
    (data['date/time'].dt.hour >= hour) & (data['date/time'].dt.hour < (hour + 1))
    ]
hist = np.histogram(filtered['date/time'].dt.minute, bins=60, range=(0, 60))[0]
chart_data = pd.DataFrame({'minute': range(60), 'crashes': hist})
fig = px.bar(chart_data, x='minute', y='crashes', hover_data=['minute', 'crashes'], height=400)
st.write(fig)

# make a dropdown search
st.header("Top 5 dangerous streets affected by types")
select = st.selectbox("Affected by type of people", ['Pedestrians', 'Cyclists', 'Motorists'])

if select == 'Pedestrians':
    st.write(original_data.query("number of pedestrians injured >= 1")[
                 ['on street name', 'number of pedestrians injured']].sort_values(
        by=['number of pedestrians injured'], ascending=False).dropna(how='any')[:5])
elif select == 'Cyclists':
    st.write(original_data.query("number of cyclists injured >= 1")[
                 ['on street name', 'number of cyclists injured']].sort_values(
        by=['number of cyclists injured'], ascending=False).dropna(how='any')[:5])
elif select == 'Motorists':
    st.write(original_data.query("number of motorists injured >= 1")[
                 ['on street name', 'number of motorists injured']].sort_values(
        by=['number of motorists injured'], ascending=False).dropna(how='any')[:5])